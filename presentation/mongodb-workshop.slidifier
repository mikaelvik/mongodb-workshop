
# MongoDB-workshop

---

# Agenda  NoSQL 2013-03-19

## Kjapp intro

Neste slide...

## Workshopping

Lære basics vha REPL-workout
Java-køding

Start med:
\\
# Hent ned kode
$ git clone https://github.com/mikaelvik/mongodb-workshop

# Fyre opp mongo
$ mongod & # start server i bakgrunn
$ mongo workshop # start klient mot databasa 'workshop'
\\

Presentasjonen ligg her:
- slidifier.com/slidifier.html?id=8wtKRCSsUa

---

# Stikkord

"MongoDB (from "humongous") is a scalable, high-performance, open source NoSQL database. Written in C++"

## Funksjonalitet (fritt oversatt, nesten til norsk)
- Dokument-orientert; JSON (BSON), dynamiske skjema, nøsting
- Full indeks-støtte; indeksér på akkurat det du vil
- Replikering og høg tilgjengelighet (over LAN eller WAN)
- Auto-sharding; skaler horisontalt uten å tenke på funksjonalitet
- Spørrespråk; rike dokument-baserte spørringar
- Raske oppdateringar, in-place, automatiske modifiers
- Map/Reduce; fleksibel aggregering og data-prosessering

## Mellom anna brukt av
- FourSquare, CERN, Craigslist, Disney, MTV Networks, SAP, EA


---

# Dokument-format

Om du gløymte det tidligare:
\\
$ git clone https://github.com/mikaelvik/mongodb-workshop
$ mongod & # start server i bakgrunn
$ mongo workshop # start klient mot databasa 'workshop'
\\

Gitt at vi allereie har oppretta data:
\\
$ mongo workshop
> printjson( db.dudes.findOne({name: /^A/}) )
{
  "_id" : ObjectId("5140636769a3b73b5d997e99"),
  "name" : "Andreas Heim",
  "skill" : 4300,
  "employed_since" : ISODate("2008-01-31T00:00:00Z"),
  "famous_for" : [
    "Bekk Band", "Medmenneske", "RoboCup"
  ],
  "info" : {
  	"seniority" : "Akkurat passe",
  	"branch" : "Tech",
  	"group" : "NoSQL"
  }
}
\\
JSON... Nøsting av dokument i dokument (info)
ObjectId(...):
--- 4-byte timestamp,
--- 3-byte machine identifier,
--- 2-byte process id, and
--- 3-byte counter, starting with a random value.

---

# Opprette data

På tide å faktisk opprette og spørre mot data, sjekk filene:
- src/js/1-insert-dudes.js
- src/js/2-query-dudes.js
- src/js/3-update-dudes.js
- src/js/4-generate-dudes.js

Legg inn eit innslag (samme som vart printa på forrige slide..)
\\
> db.dudes.insert({
  "name" : "Andreas Heim",
  "skill" : 4300,
  "employed_since" : ISODate("2008-01-31T00:00:00Z"),
  "famous_for" : [
    "Bekk Band", "Medmenneske", "RoboCup"
  ],
  "info" : {
    "seniority" : "Akkurat passe",
    "branch" : "Tech",
    "group" : "NoSQL"
  }
});
\\

Tungvint og verbost å måtte gjenta heile json-strukturen for kvar insert (ha tålmod...)

---

# Data-typar og inspeksjon

Informasjon og utforsking
\\
> show collections
> db.dudes.count()
> db.dudes.help()
> db.dudes #...
\\

JavaScript...
\\
> typeof db
object
> typeof db.dudes
object
> typeof db.dudes.insert
function
\\

Sjekk implementasjon ved å angi funksjon uten parantesar (som i Python)
\\
> db.dudes.insert
function (obj, _allow_dot) {
  if (!obj) {
    throw "no object passed to insert!";
  }
  ...
\\

---

# Legg inn meir data...

Stress å skrive json, lag ein funksjon:
\\
// src/main/js/1-insert-dudes.js
> function insertDude(name, skill, employed_since, famous_for, info) {
  db.dudes.insert({
    name: name,
    skill: skill,
    employed_since: ISODate(employed_since),
    famous_for: famous_for,
    info: info
  });
}
> insertDude # for å inspisere...
\\

Legg inn fleire dudes
\\
> insertDude(
  "Mikael Vik", 667, "2006-06-13", ["Sunnmøring", "Python", "Americana"], {branch: "Tech", group: "NoSQL"}
);
> insertDude(
  "Ketil Velle", 6200, "1982-03-03", ["Bekk", "Sunnmøring", "Konsertgjengar"], {branch: "Tech", group: "NoSQL"}
);
> insertDude(
  "Olav Folkestad", 666666, "2000-01-01", ["Sjef", "Bekk Band"]
);
\\

---

# Spørringar og uthenting av data

Kan sjølvsagt spørre vha id
\\
// src/main/js/2-query-dudes.js
> db.dudes.find({ "_id" : ObjectId("4d0ada1fbb30773266f39fe4") })
\\

Meir interessant
\\
// Match på fleire felt
> db.dudes.find({
  name: /i/,
  skill : { $gt: 1000 }
});
\\
\\
// Inkluder/utelukk felt
> db.dudes.find(
  { name: /i/, skill : { $gt : 1000 } },
  { _id: 0, name: 1, skill: 1, info: 1}
);
\\
\\
// Kriterier vha objekt
> var skill_range = {};
> skill_range['$gt'] = 667;
> skill_range['$lt'] = 100000;
> db.dudes.find({skill: skill_range}, {_id: 0, name: 1});
\\

---

# Grav litt djupare

\\
> var dd = db.dudes;
> var fields = {_id: 0, name: 1, skill: 1, famous_for: 1, info: 1};
\\
\\
// Eksakt treff
> dd.find({famous_for: "Sunnmøring"}, fields);
\\
\\
// Delvis treff
> dd.find({famous_for: /Bekk/}, fields);
\\
\\
// Alle
> dd.find({famous_for: { $all: ["Sunnmøring", "Bekk"]}}, fields);
\\
\\
// Subdokument
> dd.find({"info.branch": "Tech"}, fields);
> dd.find({"info.branch": "Tech", "info.group": "NoSQL" }, fields);
\\
\\
// Boolske operatorar
> dd.find(
  { $or : [
    { famous_for: "Konsertgjengar" },
    {skill : { $gt: 10000 } }
  ] },
  fields
);
\\

---

# Oppgåve-løysing #1

Sjekk dokumentasjon for operatorar
- http://docs.mongodb.org/manual/reference/operator/

Oppgåver:
- finne dudes utan info
- finne dudes som er famous_for et eller anna med Bekk
- ikkje vise namn og info
- TODO

---

# Endre og legge til data

Endring av eksisterande data må gjerast vha operatorar

Inkrementer skills pga mongodb-kunnskap
\\
// src/main/js/3-update-dudes.js
> db.dudes.update(
  { name: /Mikael/ },
  { $inc: {skill: 500} }
);
\\

Legg til programmerings-språk under info
\\
// Feil, vil endre/slette heile det eksisterande dokumentet...
> db.dudes.update( {name: "Mikael Vik"}, {"info.languages": []} );

// Må bruke '$set'-operatoren
> db.dudes.update(
  {name: "Mikael Vik"},
  { $set:
    {"info.languages": [
      {name: "Java", knows: true},
      {name: "Cobol", knows: false}
    ] }
  }
);

> db.dudes.find({name: /M/});
\\
---

# Oppgåve-løysing #2

Sjekk dokumentasjon for operatorar
- http://docs.mongodb.org/manual/reference/operator/

Oppgåver:
- finne en dude som har languages
- finne alle som kan programmeringsspråket Java godt
-- bruk $elemMatch
- TODO

---

# Grav endå litt djupare

Korleis finne ein programmerar som kan Java godt?
\\
// Ikkje sånn
> dd.find({
  "info.languages.name": "Java",
  "info.languages.knows": true
});
\\

Dette gir treff for alle som:
- har Java som språk, og
- kan eit språk godt...


Må sørge for at treffa matchar for samme element

\\
// Men sånn, vha $elemMatch
dd.find({
  "info.languages": {
    $elemMatch: {
      name: "Java",
      knows: true
    }
  }
});
\\

---

# Korleis referere til andre dokument

Her viser eg kun teorien bak med eit enkelt eksempel...
Mongo er ikkje bygd for å utføre joins
Når ein likevel har behov for å gjere det er det anbefalt å gjere det slik:

\\
// Konstruksjon for referanse
{ $ref: "collection_name", $id: "reference_id" }
\\
\\
// Oppdater dokument
> db.dudes.update(
  { name: /Mikael/ },
  { $set: { county: { $ref: "counties", $id: "mr" } } }
);
\\
\\
// Hent ut eit dokument
> var mikael = db.towns.find( { name: /Mikael/ } );
\\
\\
// Om du veit kva collections som er referert:
> db.counties.findOne( { _id: mikael.county.$id } );
// Hent referert dokument vha JavaScript:
> db[ mikael.county.$ref ].findOne({ _id: mikael.county.$id });
\\

---

# Dropwizard

Oppgåver:
- DW #1: uthenting av alle 'dudes'
- DW #2: uthenting av dudes vha filtrering
- DW #3: persistering av dude

Fyr opp applikasjonen mongodb-workshop
\\
$ ./build-and-start-server.sh
# mvn package && java -jar target/mongodb-tutorial-1.0-SNAPSHOT.jar server mongodb-workshop-local.yml
# for restart: Ctrl+C, Ctrl+P, <enter> (uten å vente)
\\

Gå til localhost:8080/index.html

Åpne prosjektet i din favoritt-editor

Gjer magien din i 'DudesResource.java'

Litt eksempelkode i 'JongoResource.java' og 'MongoResource.java'

---

# Indeksering

## TODO: Ganske uferdige greier
Kjapt eksempel på effekta av indeksering...

Hiv inn haugevis av data:
\\
// src/main/js/4-generate-dudes.js
// TODO: Vurder å paste inn kode...
\\


\\
> var query = { skill: { $gt: 7000 }, name: /Java/ };
> db.dudes.find().limit(2);
> db.system.indexes.find();
// Vis detaljar om køyring av find-metoden
> db.dudes.find( query ).explain();
\\

Opprett indeks og vis detaljar på nytt
\\
> db.dudes.ensureIndex(
  {??: ??}
);
> db.dudes.find( query ).explain();
\\

---

# Ressursar

Seven Databases in Seven Weeks
- http://pragprog.com/book/rwdata/seven-databases-in-seven-weeks

Workshop-kode
- https://github.com/mikaelvik/mongodb-workshop

MongoDB
- http://docs.mongodb.org/manual/

Jongo (Java+Mongo)
- http://jongo.org/

Dropwizard
- http://dropwizard.codahale.com/

Opphavsmann:
- Mikael Vik (mikael.vik@gmail.com)
---

# Veien vidare

Sjå nærmare på:
- Sharding
- Indeksering
- Aggregering
- Håndtering av last/samtidige operasjonar

Fiks:
- dropp fat jar
- mindre sårbar mapping frå dudes til Dude
- vise oppdatert liste av dudes etter POST

Kanskje sjå nærmare på:
- Migrering av datamodell
-
